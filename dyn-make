#!/bin/bash

maincmd=$1
shift

RootSrv=/home/ubuntu/RodaSrv 



## 
rodaname=""
incport=""
rodaporthost=9700
rodaportguest=9294
dynsrvport=7777
rodauid=1000
rodagid=1000
rodatools=$HOME/Share/Roda
dyndocubuntu=focal
rversion="4.0.2"
osidentifier="ubuntu-2004"

## name of tool
rodatoolsname=default
## name of mongo
rodamongoname=default
## working directory name to mount volumes 
rodawdname=default

## default name for common network
networkname=dyn_network




mongouser=mongo
mongopwd=lol2mongo
mongoport=27018
mongoexpressport=8081

while true 
do
	cmd=$1
	case $cmd in
	--net)
		shift
		networkname=$1
		shift
		;;
	--wd-name|--workdir-name)
		shift
		rodawdname=$1
		shift
	;;
	--tools-name)
		shift
		rodatoolsname=$1
		shift
	;;
	--mongo-name)
		shift
		rodamongoname=$1
		shift
	;;
	--inc-port)
		shift
		incport=$1
		shift
	;;
	--guest-port)
		shift
		rodaportguest=$1
		shift
	;;
	--host-port)
		shift
		rodaporthost=$1
		shift
	;;
	--dyn-port)
		shift
		dynsrvport=$1
		shift
	;;
	--uid)
		shift
		rodauid=$1
		shift
	;;
	--gid)
		shift
		rodagid=$1
		shift
	;;
	-w|--wd|--working-dir)
		shift
		rodawd=$1
		shift
	;;
	-t|--tools)
		shift
		rodatools=$1
		shift
	;;
	-u|--ubuntu)
		shift
		dyndocubuntu=$1
		shift
	;;
	--os)
		shift
		osidentifier=$1
		shift
	;;
	--rversion)
		shift
		rversion=$1
		shift
	;;
	--mongo-user)
		shift
		mongouser=$1
		shift
	;;
	--mongo-pwd)
		shift
		mongopwd=$1
		shift
	;;
	--mongo-port)
		shift
		mongoport=$1
		shift
	;;
	--mongo-express-port)
		shift
		mongoexpressport=$1
		shift
	;;
	*)
		break
	;;
	esac
done


case $maincmd in
network)
	network=$networkname
	if [ "$1" != "" ]; then 
		network=$1
	fi
	docker network create -d bridge $network
	;;
workdir | wd)
	wdname=$1
	shift
	wd=$1
	if [ "$wd" = "" ]; then
		wd=$wdname
		wdname=default
	fi
	# subdirs to mount in user root
	rodapublic=$wd/RodaPublic
	rodadyndoclibrary=$wd/dyndoc-library
	rodadyndocworld=$wd/dyndoc-world
	
	mkdir -p $rodapublic
	mkdir -p $rodadyndoclibrary
	mkdir -p $rodadyndocworld

	mkdir -p ../.workdirs/$wdname
	echo "$wd" > ../.workdirs/$wdname/wdpath
	;;
mongo) ## characterized by an id
	mongoname=default
	if [ "$1" != "" ]; then 
		mongoname=$1
	fi
	if [ "${incport}" != "" ]; then
		mongoport="$(($mongoport + $incport))"
		mongoexpressport="$(($mongoexpressport + $incport))"
	fi
	mkdir -p ./data/db
	mkdir -p ./data/configdb
	mongodir="."
	# creating docker-compose.yml
	txt=`cat template/docker-compose.mongo.yml`
	txt=${txt//MongoUser/$mongouser}
	txt=${txt//MongoPwd/$mongopwd}
	txt=${txt//MongoPort/$mongoport}
	txt=${txt//MongoExpressPort/$mongoexpressport}
	txt=${txt//MongoDir/$mongodir}
	txt=${txt//NetworkName/$networkname}
	echo "$txt" > "../dbs/${mongoname}/docker-compose.yml"
	;;
tools)
	toolname=default
	if [ "$1" != "" ]; then 
		toolname=$1
	fi
	mkdir -p ../tools/${toolname}/bin
	cp scripts/guest-install.sh ../tools/${toolname}/bin/.install.sh
	cp -r share/tools/* ../tools/${toolname}/
	### TODO:
	## *.host service removed in dyn-site
	;;
site)
	site="../sites/$1"
	shift
	mkdir -p $site/bin
	mkdir -p $site/Dockerfiles

	if [ "${rodaname}" = "" ]; then
		rodaname="-${dyndocubuntu}"
	fi 
	if [ "${incport}" != "" ]; then
		rodaportguest="$(($rodaportguest + $incport))"
		rodaporthost="$(($rodaporthost + $incport))"
		dynsrvport="$(($dynsrvport + $incport))"
	fi
	rodawd=`cat ../.workdirs/${rodawdname}/wdpath`
	rodapublic="${rodawd}/RodaPublic"
	rodadyndoclibrary="${rodawd}/dyndoc-library"
	rodadyndocworld="${rodawd}/dyndoc-world"
	
	# creating docker-compose.yml
	txt=`cat template/docker-compose.yml`
	txt=${txt//RodaName/$rodaname}
	txt=${txt//RodaSrvPortGuest/$rodaportguest}
	txt=${txt//RodaSrvPortHost/$rodaporthost}
	txt=${txt//RodaSrvUID/$rodauid}
	txt=${txt//RodaSrvGID/$rodagid}
	txt=${txt//RodaSrvPublic/$rodapublic}
	txt=${txt//RodaSrvTools/$rodatools}
	txt=${txt//DyndocRubyUbuntu/$dyndocubuntu}
	txt=${txt//RodaSrvDyndocLibrary/$rodadyndoclibrary}
	txt=${txt//RodaSrvDyndocWorld/$rodadyndocworld}
	txt=${txt//NetworkName/$networkname}
	txt=${txt//MongoName/$rodamongoname}
	rodatoolsname="../../tools/${rodatoolsname}"
	txt=${txt//RodaToolsName/$rodatoolsname}
	echo "$txt" > "$site/docker-compose.yml"

	# creating DockerFile-dyndoc
	txt=`cat template/Dockerfile-dyndoc`
	txt=${txt//RodaSrvUID/$rodauid}
	txt=${txt//RodaSrvGID/$rodagid}
	txt=${txt//RodaSrvPublic/$rodapublic}
	txt=${txt//RodaSrvTools/$rodatools}
	txt=${txt//DyndocRubyUbuntu/$dyndocubuntu}
	txt=${txt//DyndocRubyRVERSION/$rversion}
	txt=${txt//DyndocRubyOSIDENTIFIER/$osidentifier}
	txt=${txt//RodaSrvDyndocLibrary/$rodadyndoclibrary}
	txt=${txt//RodaSrvDyndocWorld/$rodadyndocworld}
	echo "$txt" > "$site/DockerFiles/Dockerfile-dyndoc"

	# creating DockerFile-website
	txt=`cat template/Dockerfile-website`
	txt=${txt//RodaSrvPortGuest/$rodaportguest}
	txt=${txt//RodaSrvUID/$rodauid}
	txt=${txt//RodaSrvGID/$rodagid}
	txt=${txt//RodaSrvPublic/$rodapublic}
	txt=${txt//RodaSrvTools/$rodatools}
	txt=${txt//DyndocRubyUbuntu/$dyndocubuntu}
	txt=${txt//RodaSrvDyndocLibrary/$rodadyndoclibrary}
	txt=${txt//RodaSrvDyndocWorld/$rodadyndocworld}
	echo "$txt" > "$site/DockerFiles/Dockerfile-website"

	# creating dyndoc-servers.yml
	echo "---" > "$site/DockerFiles/dyndoc-servers.yml"
	echo "ports:" >> "$site/DockerFiles/dyndoc-servers.yml"
	echo "  dyn-srv: $dynsrvport" >> "$site/DockerFiles/dyndoc-servers.yml"
	echo "  dyn-cli: $dynsrvport" >> "$site/DockerFiles/dyndoc-servers.yml"
	echo "  dyn-http: $rodaportguest" >> "$site/DockerFiles/dyndoc-servers.yml"

	# creating dyn-site
	txt=`cat template/dyn-site`
	txt=${txt//RodaToolsName/$rodatoolsname}
	echo "$txt" > "$site/dyn-site"
	chmod u+x $site/dyn-site

	;;
esac
